include "file.conf"

akka {
	loglevel = info

	actor {
		provider = cluster

		serialization-bindings {
			"utils.traits.CborSerializable" = jackson-cbor
		}
	}

	remote.artery {
		canonical {
		  hostname = "127.0.0.1"
		  port = 0
		}
    advanced {
      maximum-frame-size = 1024MiB
      #buffer-pool-size = 128
      maximum-large-frame-size = 1024MiB
      #large-buffer-pool-size = 32
    }
	}

	cluster {
		seed-nodes = [
      "akka://media@127.0.0.1:2553"
      "akka://media@127.0.0.1:2554"
		]

		sharding {
			passivate-idle-entity-after = on
      remember-entities = on
      passivate-idle-entity-after = 30s
		}

		roles = [
      "write-model"
      "read-model"
    ]

 		role {
      write-model.min-nr-of-members = 0
      read-model.min-nr-of-members = 0
    }

		downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
	}

  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
  }

  projection.cassandra.offset-store.keyspace = "media_manager_state"
}

akka.persistence.cassandra {
  events-by-tag {
    bucket-size = "Day"
    # for reduced latency
    eventual-consistency-delay = 2s
    flush-interval = 50ms
    pubsub-notification = on
    first-time-bucket = "20200115T00:00"
  }

  query {
    refresh-interval = 2s
  }

  # don't use autocreate in production
  journal.keyspace-autocreate = on
  journal.tables-autocreate = on
  snapshot.keyspace-autocreate = on
  snapshot.tables-autocreate = on
}

event-processor {
  tag-prefix = "file-actor"       // even processor tag prefix
  parallelism = 4                  // number of event processors
}

datastax-java-driver {
  #basic {
  #  contact-points = [ "127.0.0.1:9042" ]
  #  load-balancing-policy.local-datacenter = datacenter1
  #}
  advanced.reconnect-on-init = on
}

media-manage-state {
  node.port = [
    2553
    2554
  ]
}

akka.management.http.hostname = "127.0.0.1"
akka.management.http.port = 8558
#!/bin/bash
echo "Initialize project"
echo ""

execComposeUp() {
	if [ -z "$(sudo docker ps | grep cassandra)" ]
	then
		echo "No integrated compose found."
		echo ""
		echo "Initiating integrated compose."
		echo ""
		sudo docker-compose up -d
	fi

	echo ""
	echo "Integrated compose successfully deployed."
	echo ""
}

execComposeDown() {
	echo "Initiating shutdown integrated compose."
	echo ""
	sudo docker-compose down 
	echo ""	
	echo "Removing local mounts to docker to recover some space please confirm."
	sudo docker volume prune
	echo ""
	echo "Compose shutdown."
}

execComposeUp

execState() {
	sbt "project mediaManageState" $*

	if [ -z "$run" -o "$run" == "Y" -o $"run" == "y" ]
	then
		#gnome-terminal -- java -jar media-manage-state/target/state.jar cassandra
		gnome-terminal -- sbt "project mediaManageState" ~reStart 
		#gnome-terminal -- java -jar media-manage-state/target/state.jar 
	fi
}

execApp() {
	sbt "project mediaManagerApp" $*

	if [ -z "$run" -o "$run" == "Y" -o $"run" == "y" ]
	then
		gnome-terminal -- sbt "project mediaManagerApp" ~reStart
		#gnome-terminal -- java -jar media-manager-app/target/app.jar
	fi
}

execService() {
	echo ""
	sbt "project mediaManagerService" $*
	
	if [ -z "$run" -o "$run" == "Y" -o $"run" == "y" ]
	then
		gnome-terminal -- sbt "project mediaManagerService" ~reStart
		#gnome-terminal -- java -jar media-manager-service/target/service.jar
	fi
}

repo() {
	echo "Commands: hint all sbt commands are valid."
	echo "- clean"
	echo "- compile"
	echo "- test"
	echo "- assembly"
	echo "- default = clean compile test assembly"
	echo ""

	read -p "Please put the commands: " cmd
	echo ""
	clear
	
	if [ -z "$cmd" ]
	then
		echo "Starting clean compile package project..."
		compileCmd="clean compile test"
	else
		echo "Starting $cmd project..."
		compileCmd=$cmd
	fi

	echo "----------- Code --------------"
	echo "700 - media-manage-state"
	echo "070 - media-manager-app"
	echo "007 - media-manager-service"
	echo "000 - restart integrated compose."
	echo ""

	echo "Please select combination to run eq: "
	echo "- 770 executing command clean compile test package state and app"
	echo ""
	read -p "Enter combination code: " code
	echo ""

	if [ -z "$code" -a "$code" != "000" ] 
	then 
		read -p "Would you like to run the module after executing the commands [Y/n]?" run
		echo ""

		if [ -z "$run" -o "$run" == "Y" -o $"run" == "y" ]
		then
			compileCmd="$compileCmd assembly"
		fi
	fi

	case $code in 
		700 | 7)
			echo "running state only..."
			echo ""
			execState $compileCmd
		;;

		770 | 77)
			echo "running state and app only..."
			echo ""
			execState $compileCmd
			echo ""
			execApp $compileCmd
		;;

		777)
			echo "running state, app and services..."
			echo ""
			execState $compileCmd
			echo ""
			execApp $compileCmd 
			echo ""
			execService  $compileCmd
		;;

		007)
			echo "running service only..."
			echo ""
			execService $compileCmd
		;;

		707)
			echo "running state and service only..."
			echo ""
			execState $compileCmd
			echo ""
			execService $compileCmd
		;;

		070)
			echo "running app only..."
			echo ""
			execApp $compileCmd
		;;

		077)
			echo "running app and service only..."
			echo ""
			execApp $compileCmd
			echo ""
			execService $compileCmd
		;;

		0 | 00 | 000)
			execComposeDown
			execComposeUp
		;;

		*)
			echo "Invalid combination based on the code above." 
			echo "- help eq: 707 = state and services | 777 = state, services, app"
			echo ""
		;;
	esac
	echo ""
	echo ""
	repo
}

repo